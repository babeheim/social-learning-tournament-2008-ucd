
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Round 1 and 2: Innovate
%Round 3: Exploit
%Rounds 4 to End: Exploit unless payoff decreases below median payoff, then
%       switch
%
%Ryan Boyko with base of code by Matt Zimmerman
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [move, myRep]=ob_2x_exploit_learn_trigger(roundsAlive, myRepertoire, myHistory)


if (isempty(myRepertoire)==0) && (myRepertoire(1,1)==0)
    if size(myRepertoire,2)==1
        myRepertoire=[];
    else
        myRepertoire = myRepertoire(1:2,2:size(myRepertoire,2));
    end
end

env_change_counter=0;
repeat_move_counter=0;

for a=1:roundsAlive-1
   if (myHistory(2,a)==-1 || myHistory(2,a)>0) && (myHistory(3,a)==myHistory(3,a+1))
        repeat_move_counter=repeat_move_counter+1;
        if myHistory(4,a)~=myHistory(4,a+1)
           env_change_counter=env_change_counter+1;
       end
   end
end

if repeat_move_counter~=0
   est_env_change=env_change_counter/repeat_move_counter;
else
   est_env_change=.2;
end     

if size(myRepertoire, 2)<2
    if size(myRepertoire, 2)==1 && roundsAlive<3 && myHistory(2,1) == -1
        move=myRepertoire(1,1);
    else
        choice=rand;
        if choice <.1 %innovate 10 percent of time
            move=-1;
        else
            move=0;
        end
    end
elseif myHistory(2,size(myHistory,2))<1
    orderedRep = sortrows([myRepertoire'],2);
    move=orderedRep(size(orderedRep,1),1);
else 
    move=myHistory(3,size(myHistory,2));
%%%    payoffs = unique(myHistory(4,1:size(myHistory, 2)));
    payoffs = myHistory(4,1:size(myHistory, 2));
    ordered_payoffs = sortrows([payoffs]');
    if mod(size(ordered_payoffs),2)==0
   %%%     disp(ceil(size(ordered_payoffs)/2));
   %%%     disp(floor(size(ordered_payoffs)/2));
   %%%     med_payoff = (ordered_payoffs(ceil(size(ordered_payoffs)/2))+ordered_payoffs(floor(size(ordered_payoffs)/2)))/2;
        med_payoff = (ordered_payoffs(size(ordered_payoffs)/2)+ordered_payoffs(size(ordered_payoffs)/2+1))/2;
    else
        med_payoff = ordered_payoffs(ceil(size(ordered_payoffs)/2));
    end
    if myHistory(4,size(myHistory,2)) < med_payoff(1)
 %       myRepertoire
        orderedRep = sortrows([myRepertoire'],2);
 %       orderedRep
        best_move=orderedRep(size(orderedRep,1),1);
        best_exp_payoff=orderedRep(size(orderedRep,1),2);
        if (best_exp_payoff < med_payoff(1)) && ((size(myRepertoire,2)<4 && roundsAlive>20) || (size(myRepertoire,2)<3 && roundsAlive>14))
            choice=rand;
            if ((choice > (best_exp_payoff/med_payoff(1))) && (est_env_change < .15) && (roundsAlive > 10))
     %           best_exp_payoff
     %           med_payoff(1)
  %              myHistory
                move = 0;
            elseif (est_env_change < .1) || (best_move ~= myHistory(3,size(myHistory,2)))
                move = best_move;
            else
                move = orderedRep(size(orderedRep,1)-1,1);
            end
        elseif (est_env_change < .1) || (best_move ~= myHistory(3,size(myHistory,2)))
            move=best_move;
        else
            move = orderedRep(size(orderedRep,1)-1,1);
        end
    end
    
  %  move
  %  myHistory
end
    
myRep=myRepertoire;