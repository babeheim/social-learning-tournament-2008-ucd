
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Round 1 and 2: Innovate
%Round 3: Exploit
%Rounds 4 to End: Exploit unless payoff decreases below median payoff, then
%       switch
%
%Ryan Boyko with base of code by Matt Zimmerman
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [move, myRep]=innovate_twice_then_exploit(roundsAlive, myRepertoire, myHistory)

if roundsAlive==0 || roundsAlive==1
    move=-1;
elseif roundsAlive==2
 %   myRepertoire
    orderedRep = sortrows([myRepertoire'],2);
    move=orderedRep(size(orderedRep,1),1);
 %   move
else 
%%%    payoffs = unique(myHistory(4,1:size(myHistory, 2)));
 %   myHistory
    payoffs = myHistory(4,1:size(myHistory, 2));
    ordered_payoffs = sortrows([payoffs]');
 %   ordered_payoffs
    if mod(size(ordered_payoffs),2)==0
   %%%     disp(ceil(size(ordered_payoffs)/2));
   %%%     disp(floor(size(ordered_payoffs)/2));
   %%%     med_payoff = (ordered_payoffs(ceil(size(ordered_payoffs)/2))+ordered_payoffs(floor(size(ordered_payoffs)/2)))/2;
        med_payoff = (ordered_payoffs(size(ordered_payoffs)/2)+ordered_payoffs(size(ordered_payoffs)/2+1))/2;
    else
        med_payoff = ordered_payoffs(ceil(size(ordered_payoffs)/2));
    end
 %   med_payoff
    if myHistory(4,size(myHistory,2)) < med_payoff(1)
        last_move = myHistory(3,size(myHistory,2));
        if myRepertoire(1,1)==last_move
            move=myRepertoire(1,2);
        else
            move=myRepertoire(1,1);
        end
    else
        move = myHistory(3,size(myHistory,2));
    end
 %   myRepertoire
 %   move
end
    
myRep=myRepertoire;